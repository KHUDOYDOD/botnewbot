import logging
import hashlib
import time
import os
import sys
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, ConversationHandler
from config import *
from market_analyzer import MarketAnalyzer
from utils import get_currency_keyboard, get_language_keyboard, format_signal_message
try:
    from generate_sample import create_analysis_image
except ImportError:
    logging.error("Could not import generate_sample module. Chart generation will be disabled.")
    def create_analysis_image(*args, **kwargs):
        logging.warning("Chart generation is disabled due to missing module")
        return False
from datetime import datetime
from models import (
    add_user, get_user, approve_user, verify_user_password, update_user_language,
    get_all_users, get_pending_users, delete_user, set_user_admin_status,
    create_admin_user, get_approved_user_ids, ADMIN_USERNAME, ADMIN_PASSWORD_HASH
)
from keep_alive import keep_alive

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler(), logging.FileHandler('bot.log')]
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
PENDING_USERS = {}
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
ADMIN_PASSWORD, ADMIN_MENU, ADMIN_USER_MANAGEMENT, ADMIN_BROADCAST_MESSAGE = range(4)
ADMIN_CURRENCY_MANAGEMENT, ADMIN_CURRENCY_ADD, ADMIN_CURRENCY_EDIT = range(4, 7)
ADMIN_TEXT_MANAGEMENT, ADMIN_TEXT_ADD, ADMIN_TEXT_EDIT = range(7, 10)
ADMIN_SETTINGS, ADMIN_CHANGE_PASSWORD, ADMIN_ACTIVITY, ADMIN_ABOUT = range(10, 14)

def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode()).hexdigest()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        user_id = user.id
        username = user.username

        # Add user to database
        add_user(user_id, username)
        user_data = get_user(user_id)

        # Set default language
        lang_code = user_data['language_code'] if user_data else 'tg'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_data and user_data.get('is_approved'):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            keyboard = get_currency_keyboard(current_lang=lang_code)
            await update.message.reply_text(
                MESSAGES[lang_code]['WELCOME'],
                reply_markup=keyboard,
                parse_mode='MarkdownV2'
            )
        elif username and username.lower() == ADMIN_USERNAME.lower():
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —Å–æ–∑–¥–∞–µ–º —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            create_admin_user(user_id, username)
            keyboard = get_currency_keyboard(current_lang=lang_code)
            admin_welcome = f"üëë –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{username}.\n\n"
            await update.message.reply_text(
                admin_welcome,
                reply_markup=keyboard
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å escape-—Å–∏–º–≤–æ–ª–∞–º–∏
            await update.message.reply_text(
                MESSAGES[lang_code]['WELCOME'],
                reply_markup=keyboard,
                parse_mode='MarkdownV2'
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            register_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="send_request")],
                [InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language")]
            ])
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            from create_welcome_image import create_welcome_image
            
            welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n\n" \
                          "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n" \
                          "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.\n\n" \
                          "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /register –ø–æ–∑–∂–µ.\n\n" \
                          "üìû –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @tradeporu"
            
            try:
                # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if create_welcome_image():
                    with open('welcome_image.png', 'rb') as photo:
                        await update.message.reply_photo(
                            photo=photo,
                            caption=welcome_text,
                            reply_markup=register_keyboard
                        )
                else:
                    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    await update.message.reply_text(
                        welcome_text,
                        reply_markup=register_keyboard
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                await update.message.reply_text(
                    welcome_text,
                    reply_markup=register_keyboard
                )

    except Exception as e:
        logger.error(f"Start error: {str(e)}")
        await update.message.reply_text(MESSAGES['tg']['ERRORS']['GENERAL_ERROR'])

async def get_admin_chat_id(bot):
    """Get admin's chat ID by username"""
    try:
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏
        admin_chat = await bot.get_chat(f"@{ADMIN_USERNAME}")
        return admin_chat.id
    except Exception as e:
        logger.error(f"Error getting admin chat ID: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç–æ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
        return None

async def handle_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    # Ignore header buttons
    if query.data.startswith('header_'):
        await query.answer()
        return

    admin_username = update.effective_user.username

    if not admin_username or admin_username.lower() != ADMIN_USERNAME.lower():
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    action, user_id = query.data.split('_')
    user_id = int(user_id)

    if user_id not in PENDING_USERS:
        await query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        return

    user_info = PENDING_USERS[user_id]

    if action == "approve":
        try:
            password = ''.join([str(hash(datetime.now()))[i:i+2] for i in range(0, 8, 2)])
            password_hash = hash_password(password)
            
            if approve_user(user_id, password_hash):
                del PENDING_USERS[user_id]
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
                escaped_password = password.replace("_", "\\_").replace("*", "\\*").replace("[", "\\[").replace("]", "\\]").replace("(", "\\(").replace(")", "\\)").replace("~", "\\~").replace("`", "\\`").replace(">", "\\>").replace("#", "\\#").replace("+", "\\+").replace("-", "\\-").replace("=", "\\=").replace("|", "\\|").replace("{", "\\{").replace("}", "\\}").replace(".", "\\.").replace("!", "\\!")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = get_user(user_id)
                lang_code = user_data['language_code'] if user_data and 'language_code' in user_data else 'tg'
                
                # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
                approval_messages = {
                    'tg': f"‚úÖ –î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ “õ–∞–±—É–ª –∫–∞—Ä–¥–∞ —à—É–¥\\!\n\n–†–∞–º–∑–∏ —à—É–º–æ –±–∞—Ä–æ–∏ –≤–æ—Ä–∏–¥ —à—É–¥–∞–Ω: `{escaped_password}`\n\n–õ—É—Ç—Ñ–∞–Ω, –æ–Ω—Ä–æ –Ω–∏–≥–æ“≥ –¥–æ—Ä–µ–¥\\.",
                    'ru': f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞\\!\n\n–í–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞: `{escaped_password}`\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ\\.",
                    'uz': f"‚úÖ Arizangiz tasdiqlandi\\!\n\nKirish uchun parolingiz: `{escaped_password}`\n\nIltimos, uni saqlab qoling\\.",
                    'kk': f"‚úÖ ”®—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ –º–∞“õ“±–ª–¥–∞–Ω–¥—ã\\!\n\n–ö—ñ—Ä—É “Ø—à—ñ–Ω “õ“±–ø–∏—è —Å”©–∑—ñ“£—ñ–∑: `{escaped_password}`\n\n–û–Ω—ã —Å–∞“õ—Ç–∞–ø “õ–æ–π—ã“£—ã–∑\\.",
                    'en': f"‚úÖ Your request has been approved\\!\n\nYour password: `{escaped_password}`\n\nPlease save it\\."
                }
                
                # –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
                button_texts = {
                    'tg': "üöÄ –ë–∞ –±–æ—Ç –≤–æ—Ä–∏–¥ —à–∞–≤–µ–¥",
                    'ru': "üöÄ –í–æ–π—Ç–∏ –≤ –±–æ—Ç",
                    'uz': "üöÄ Botga kirish",
                    'kk': "üöÄ –ë–æ—Ç“õ–∞ –∫—ñ—Ä—É",
                    'en': "üöÄ Enter the bot"
                }
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —è–∑—ã–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                message = approval_messages.get(lang_code, approval_messages['tg'])
                button_text = button_texts.get(lang_code, button_texts['tg'])
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—Ö–æ–¥–∞
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton(button_text, callback_data="return_to_main")]
                ])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='MarkdownV2',
                    reply_markup=keyboard
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_info['username']} –æ–¥–æ–±—Ä–µ–Ω")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –¥–µ–π—Å—Ç–≤–∏—è: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
    else:
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
        del PENDING_USERS[user_id]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user(user_id)
        lang_code = user_data['language_code'] if user_data and 'language_code' in user_data else 'tg'
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –±–∞–∑—ã
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
        from models import reset_user_approval
        reset_user_approval(user_id)
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
        rejection_messages = {
            'tg': "‚ùå –î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ —Ä–∞–¥–¥ –∫–∞—Ä–¥–∞ —à—É–¥.\n\n–®—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –¥–∞—Ä—Ö–æ—Å—Ç–∏ –Ω–∞–≤—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥.",
            'ru': "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.",
            'uz': "‚ùå Arizangiz administrator tomonidan rad etildi.\n\nSiz yangi ariza yuborishingiz mumkin.",
            'kk': "‚ùå –°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ ”ô–∫—ñ–º—à—ñ —Ç–∞—Ä–∞–ø—ã–Ω–∞–Ω “õ–∞–±—ã–ª–¥–∞–Ω–±–∞–¥—ã.\n\n–°—ñ–∑ –∂–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à –∂—ñ–±–µ—Ä–µ –∞–ª–∞—Å—ã–∑.",
            'en': "‚ùå Your request has been rejected by the administrator.\n\nYou can send a new request."
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —è–∑—ã–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message = rejection_messages.get(lang_code, rejection_messages['tg'])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É", callback_data="send_request")],
            [InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        await context.bot.send_message(
            chat_id=user_id,
            text=message,
            reply_markup=keyboard
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await query.edit_message_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_info['username']} –æ—Ç–∫–ª–æ–Ω–µ–Ω")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user = update.effective_user
    user_data = get_user(user.id)

    if not user_data:
        add_user(user.id, user.username)
        user_data = get_user(user.id)

    lang_code = user_data['language_code'] if user_data else 'tg'
    keyboard = get_currency_keyboard(current_lang=lang_code)
    await update.message.reply_text(
        MESSAGES[lang_code]['WELCOME'],
        reply_markup=keyboard,
        parse_mode='MarkdownV2'
    )

async def handle_language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        lang_code = query.data.split('_')[1]
        user_id = update.effective_user.id
        logger.info(f"Language change request from user {user_id} to {lang_code}")

        # Update user's language in database
        if update_user_language(user_id, lang_code):
            # Get fresh keyboard with new language
            keyboard = get_currency_keyboard(current_lang=lang_code)
            welcome_message = MESSAGES[lang_code]['WELCOME']

            try:
                # Delete previous message if exists
                try:
                    await query.message.delete()
                except Exception:
                    pass  # Ignore if message can't be deleted

                # Send new welcome message
                await update.effective_chat.send_message(
                    text=welcome_message,
                    reply_markup=keyboard,
                    parse_mode='MarkdownV2'
                )

                # Send confirmation in the selected language
                lang_confirmations = {
                    'tg': '‚úÖ –ó–∞–±–æ–Ω –∏–≤–∞–∑ –∫–∞—Ä–¥–∞ —à—É–¥',
                    'ru': '‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω',
                    'uz': '‚úÖ Til o ªzgartirildi',
                    'kk': '‚úÖ –¢—ñ–ª ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ',
                    'en': '‚úÖ Language changed'
                }
                await query.answer(lang_confirmations.get(lang_code, '‚úÖ OK'))
                logger.info(f"Language successfully changed to {lang_code} for user {user_id}")

            except Exception as e:
                logger.error(f"Error sending message after language change: {e}")
                await query.answer("‚ùå Error sending message")
        else:
            logger.error(f"Failed to update language to {lang_code} for user {user_id}")
            await query.answer("‚ùå Error updating language")

    except Exception as e:
        logger.error(f"Language selection error: {str(e)}")
        await query.answer("‚ùå Error processing language change")

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
        user_id = update.effective_user.id
        user_data = get_user(user_id)
        is_admin = update.effective_user.username and update.effective_user.username.lower() == ADMIN_USERNAME.lower()
        is_approved = user_data and user_data.get('is_approved')
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–∞–∂–µ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        allowed_for_all = [
            "send_request",
            "return_to_main",
            "change_language",
        ]
        is_allowed_action = query.data in allowed_for_all or query.data.startswith('lang_')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        if not (is_approved or is_admin or is_allowed_action):
            register_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="send_request")
            ]])
            
            await query.edit_message_text(
                "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                reply_markup=register_keyboard
            )
            return
            
        # Handle "Return to Main" button
        if query.data == "return_to_main":
            lang_code = user_data['language_code'] if user_data else 'tg'

            keyboard = get_currency_keyboard(current_lang=lang_code)
            try:
                await query.message.delete()
            except Exception:
                pass  # Ignore if message can't be deleted

            await update.effective_chat.send_message(
                text=MESSAGES[lang_code]['WELCOME'],
                reply_markup=keyboard,
                parse_mode='MarkdownV2'
            )
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        if query.data == "send_request":
            user = update.effective_user
            user_id = user.id
            username = user.username
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å
            user_data = get_user(user_id)
            
            if user_data and user_data.get('is_approved'):
                await query.edit_message_text(
                    "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã."
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if not user_data:
                add_user(user_id, username)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É
            PENDING_USERS[user_id] = {
                'user_id': user_id,
                'username': username,
                'timestamp': datetime.now()
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = get_user(user_id)
            lang_code = user_data['language_code'] if user_data and 'language_code' in user_data else 'tg'
            
            # –°–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            request_messages = {
                'tg': "üìù –î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ –±–∞ –º–∞—ä–º—É—Ä —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.\n\n"
                      "‚ö†Ô∏è –ë–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –¥–∞—Å—Ç—Ä–∞—Å”£ –±–∞ –±–æ—Ç, –ª—É—Ç—Ñ–∞–Ω:\n"
                      "1Ô∏è‚É£ –î–∞—Ä —Å–∞–π—Ç–∏ Pocket Option –±–æ —Ç–∞—Ä–∏“õ–∏ TRADEPO.RU –±–∞ “õ–∞–π–¥ –≥–∏—Ä–µ–¥\n"
                      "2Ô∏è‚É£ ID —Ö—É–¥—Ä–æ –±–∞ –∞–¥–º–∏–Ω —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥ (–º–∏—Å–æ–ª: id 111111)\n\n"
                      "–ë–∞—ä–¥ –∞–∑ –∏–Ω, –¥–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ –±–∞—Ä—Ä–∞—Å”£ –∫–∞—Ä–¥–∞ –º–µ—à–∞–≤–∞–¥.",
                      
                'ru': "üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                      "‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
                      "1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ Pocket Option —á–µ—Ä–µ–∑ TRADEPO.RU\n"
                      "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–ø—Ä–∏–º–µ—Ä: id 111111)\n\n"
                      "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.",
                      
                'uz': "üìù Arizangiz administratorga yuborildi.\n\n"
                      "‚ö†Ô∏è Botga kirish uchun:\n"
                      "1Ô∏è‚É£ Pocket Option saytida TRADEPO.RU orqali ro'yxatdan o'ting\n"
                      "2Ô∏è‚É£ ID raqamingizni adminga yuboring (misol: id 111111)\n\n"
                      "Shundan so'ng arizangiz ko'rib chiqiladi.",
                      
                'kk': "üìù –°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ ”ô–∫—ñ–º—à—ñ–≥–µ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.\n\n"
                      "‚ö†Ô∏è –ë–æ—Ç“õ–∞ –∫—ñ—Ä—É “Ø—à—ñ–Ω:\n"
                      "1Ô∏è‚É£ Pocket Option —Å–∞–π—Ç—ã–Ω–¥–∞ TRADEPO.RU –∞—Ä“õ—ã–ª—ã —Ç—ñ—Ä–∫–µ–ª—ñ“£—ñ–∑\n"
                      "2Ô∏è‚É£ ID –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ ”ô–∫—ñ–º—à—ñ–≥–µ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ (–º—ã—Å–∞–ª—ã: id 111111)\n\n"
                      "–û—Å—ã–¥–∞–Ω –∫–µ–π—ñ–Ω ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ “õ–∞—Ä–∞–ª–∞–¥—ã.",
                      
                'en': "üìù Your request has been sent to the administrator.\n\n"
                      "‚ö†Ô∏è To get access to the bot, please:\n"
                      "1Ô∏è‚É£ Register on Pocket Option website through TRADEPO.RU\n"
                      "2Ô∏è‚É£ Send your ID to the administrator (example: id 111111)\n\n"
                      "After that, your request will be reviewed."
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
            message = request_messages.get(lang_code, request_messages['tg'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            support_messages = {
                'tg': "\n\nüìû –ê–≥–∞—Ä —Å–∞–≤–æ–ª –¥–æ—à—Ç–∞ –±–æ—à–µ–¥, –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –±–æ —Ö–∞–¥–∞–º–æ—Ç–∏ –¥–∞—Å—Ç–≥–∏—Ä”£ —Ç–∞–º–æ—Å –≥–∏—Ä–µ–¥: @tradeporu",
                'ru': "\n\nüìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @tradeporu",
                'uz': "\n\nüìû Savollaringiz bo'lsa, qo'llab-quvvatlash xizmatiga murojaat qilishingiz mumkin: @tradeporu",
                'kk': "\n\nüìû –°“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑ –±–æ–ª—Å–∞, “õ–æ–ª–¥–∞—É “õ—ã–∑–º–µ—Ç—ñ–Ω–µ —Ö–∞–±–∞—Ä–ª–∞—Å–∞ –∞–ª–∞—Å—ã–∑: @tradeporu",
                'en': "\n\nüìû If you have any questions, you can contact support: @tradeporu"
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
            support_text = support_messages.get(lang_code, support_messages['tg'])
            message += support_text
            
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            from create_request_image import create_request_image
            try:
                # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if create_request_image(username):
                    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.message.delete()
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language")]
                    ])
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    with open('request_image.png', 'rb') as photo:
                        await context.bot.send_photo(
                            chat_id=user_id,
                            photo=photo,
                            caption=message,
                            reply_markup=keyboard
                        )
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language")]
                    ])
                    await query.edit_message_text(message, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language")]
                ])
                await query.edit_message_text(message, reply_markup=keyboard)
            
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            admin_chat_id = await get_admin_chat_id(context.bot)
            if admin_chat_id:
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
                    ]
                ]
                await context.bot.send_message(
                    chat_id=admin_chat_id,
                    text=f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                        f"üÜî ID: {user_id}\n"
                        f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,
                # —á—Ç–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                logger.warning(f"Admin chat not found. Registration request from user @{username} (ID: {user_id}) stored in pending list.")
            return

        # Ignore clicks on header buttons
        if query.data.startswith('header_'):
            await query.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not user_data:
            add_user(user_id, update.effective_user.username)
            user_data = get_user(user_id)
        
        lang_code = user_data['language_code'] if user_data else 'tg'
        logger.info(f"Current language for user {user_id}: {lang_code}")

        if query.data.startswith('lang_'):
            await handle_language_selection(update, context)
            return

        if query.data == "change_language":
            keyboard = get_language_keyboard()
            msg = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –ó–∞–±–æ–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥ / Tilni tanlang / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / Choose language:"
            try:
                if query.message.photo:
                    await query.message.reply_text(msg, reply_markup=keyboard)
                else:
                    await query.message.edit_text(msg, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"Error showing language selection: {e}")
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not (is_approved or is_admin):
            register_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="send_request")
            ]])
            
            await query.edit_message_text(
                "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏–∑—É —Ä—ã–Ω–∫–∞.\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                reply_markup=register_keyboard
            )
            return

        pair = query.data
        symbol = CURRENCY_PAIRS.get(pair)
        if not symbol:
            await query.message.reply_text(MESSAGES[lang_code]['ERRORS']['GENERAL_ERROR'])
            return

        analyzing_message = await query.message.reply_text(
            MESSAGES[lang_code]['ANALYZING'],
            parse_mode='MarkdownV2'
        )

        try:
            analyzer = MarketAnalyzer(symbol)
            analyzer.set_language(lang_code)
            analysis_result = analyzer.analyze_market()

            if not analysis_result or 'error' in analysis_result:
                error_msg = analysis_result.get('error', MESSAGES[lang_code]['ERRORS']['ANALYSIS_ERROR'])
                await analyzing_message.edit_text(error_msg, parse_mode='MarkdownV2')
                return

            market_data, error_message = analyzer.get_market_data(minutes=30)
            if error_message or market_data is None or market_data.empty:
                await analyzing_message.edit_text(MESSAGES[lang_code]['ERRORS']['NO_DATA'])
                return

            result_message = format_signal_message(pair, analysis_result, lang_code)

            try:
                create_analysis_image(analysis_result, market_data, lang_code)
                with open('analysis_sample.png', 'rb') as photo:
                    await query.message.reply_photo(
                        photo=photo,
                        caption=result_message,
                        parse_mode='MarkdownV2',
                        reply_markup=get_currency_keyboard(current_lang=lang_code)
                    )
                await analyzing_message.delete()
            except Exception as img_error:
                logger.error(f"Chart error: {str(img_error)}")
                await analyzing_message.edit_text(
                    text=result_message,
                    parse_mode='MarkdownV2',
                    reply_markup=get_currency_keyboard(current_lang=lang_code)
                )

        except Exception as e:
            logger.error(f"Analysis error: {str(e)}")
            await analyzing_message.edit_text(MESSAGES[lang_code]['ERRORS']['ANALYSIS_ERROR'])

    except Exception as e:
        logger.error(f"Button click error: {str(e)}")
        lang_code = 'tg'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await query.message.reply_text(MESSAGES[lang_code]['ERRORS']['GENERAL_ERROR'])

async def download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send the website.zip file to the user"""
    try:
        with open('website.zip', 'rb') as file:
            await update.message.reply_document(
                document=file,
                filename='website.zip',
                caption='üåê –ê—Ä—Ö–∏–≤–∏ –≤–µ–±-—Å–∞–π—Ç | –ê—Ä—Ö–∏–≤ –≤–µ–±-—Å–∞–π—Ç–∞ | Website archive'
            )
    except Exception as e:
        logger.error(f"Download error: {str(e)}")
        await update.message.reply_text("‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –±–æ—Ä–≥–∏—Ä”£ —Ä—É—Ö –¥–æ–¥. –õ—É—Ç—Ñ–∞–Ω, –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥.")

def get_admin_keyboard():
    """–°–æ–∑–¥–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        [
            InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users"),
            InlineKeyboardButton("üí± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏", callback_data="admin_currencies")
        ],
        [
            InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏", callback_data="admin_texts"),
            InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="admin_broadcast")
        ],
        
        # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="admin_stats")],
        [
            InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="admin_activity"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ],
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        [
            InlineKeyboardButton("üîê –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="admin_change_password"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ë–î", callback_data="admin_update_db")
        ],
        
        # –†–∞–∑–Ω–æ–µ
        [
            InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language"),
            InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="admin_about")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_user_management_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="admin_pending")],
        [InlineKeyboardButton("üë§ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_all_users")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_user_action_keyboard(user_id):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
        ],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_pending")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_user_list_keyboard(users, page=0, page_size=5, back_command="admin_all_users"):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    total_pages = (len(users) + page_size - 1) // page_size if users else 1
    start = page * page_size
    end = min(start + page_size, len(users)) if users else 0
    
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if users:
        for user in users[start:end]:
            username = user.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            user_id = user.get('user_id')
            is_approved = "‚úÖ" if user.get('is_approved') else "‚è≥"
            is_admin = "üëë" if user.get('is_admin') else ""
            button_text = f"{is_approved} {is_admin} @{username}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"user_{user_id}")])
    else:
        keyboard.append([InlineKeyboardButton("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="header_none")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"page_{page-1}_{back_command}"))
    nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="header_page"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"page_{page+1}_{back_command}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
        
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_users")])
    
    return InlineKeyboardMarkup(keyboard)

def get_pending_keyboard(pending_users, page=0, page_size=5):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return get_user_list_keyboard(pending_users, page, page_size, "admin_pending")

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user = update.effective_user
    user_id = user.id
    username = user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ª–∏ —ç—Ç–æ
    if username and username.lower() == ADMIN_USERNAME.lower():
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ (—Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º)
        create_admin_user(user_id, username)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await update.message.reply_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:"
        )
        return ADMIN_PASSWORD
    else:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ."
        )
        return ConversationHandler.END

async def admin_check_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    password = update.message.text
    password_hash = hash_password(password)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if password_hash == ADMIN_PASSWORD_HASH:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
        await update.message.reply_text(
            "‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."
        )
        return ConversationHandler.END

async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    
    if action == "admin_users":
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        await query.edit_message_text(
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_user_management_keyboard()
        )
        return ADMIN_USER_MANAGEMENT
    
    elif action == "admin_broadcast":
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            "üì® –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_BROADCAST_MESSAGE
    
    elif action == "admin_stats":
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        users = get_all_users()
        total_users = len(users)
        approved_users = sum(1 for user in users if user.get('is_approved'))
        admin_users = sum(1 for user in users if user.get('is_admin'))
        
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {approved_users}\n"
            f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_users}\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {total_users - approved_users}\n"
        )
        
        await query.edit_message_text(
            stats_text,
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    elif action == "admin_update_db":
        # –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            from models import init_db
            init_db()
            await query.edit_message_text(
                "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                reply_markup=get_admin_keyboard()
            )
        except Exception as e:
            logger.error(f"Error updating database: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                reply_markup=get_admin_keyboard()
            )
        return ADMIN_MENU
    
    elif action == "change_language":
        # –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –±–æ—Ç–∞
        keyboard = get_language_keyboard()
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –ó–∞–±–æ–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥ / Tilni tanlang / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / Choose language:",
            reply_markup=keyboard
        )
        return ADMIN_MENU
    
    elif action == "admin_currencies":
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏
        from models import get_all_currency_pairs
        currency_pairs = get_all_currency_pairs()
        
        currency_list = "\n".join([
            f"- {pair['display_name']} ({pair['pair_code']}): {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if pair['is_active'] else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}"
            for pair in currency_pairs
        ])
        
        if not currency_list:
            currency_list = "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"
        
        currency_keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É", callback_data="admin_add_currency")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–∞—Ä—ã", callback_data="admin_refresh_currencies")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            f"üí± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏\n\n–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä:\n{currency_list}",
            reply_markup=InlineKeyboardMarkup(currency_keyboard)
        )
        return ADMIN_CURRENCY_MANAGEMENT
        
    elif action == "admin_texts":
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞–º–∏
        from models import get_all_bot_messages
        messages = get_all_bot_messages()
        
        texts_keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç", callback_data="admin_add_text")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–∞–º
        message_keys = {}
        for msg in messages:
            key = msg['message_key']
            if key not in message_keys:
                message_keys[key] = []
            message_keys[key].append(msg)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        for key in message_keys:
            texts_keyboard.insert(-1, [InlineKeyboardButton(f"üìù {key}", callback_data=f"admin_edit_text_{key}")])
        
        if not message_keys:
            message_summary = "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤"
        else:
            message_summary = "–¢–µ–∫—Å—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n" + "\n".join([
                f"- {key} ({len(langs)} —è–∑—ã–∫–æ–≤)" 
                for key, langs in message_keys.items()
            ])
        
        await query.edit_message_text(
            f"üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏ –±–æ—Ç–∞\n\n{message_summary}",
            reply_markup=InlineKeyboardMarkup(texts_keyboard)
        )
        return ADMIN_TEXT_MANAGEMENT
        
    elif action == "admin_activity":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∞–Ω–∞–ª–∏–∑—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await query.edit_message_text(
            "–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...",
            reply_markup=None
        )
        return await admin_activity(update, context)
    
    elif action == "admin_settings":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞
        await query.edit_message_text(
            "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞...",
            reply_markup=None
        )
        return await admin_settings(update, context)
    
    elif action == "admin_change_password":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await query.edit_message_text(
            "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è...",
            reply_markup=None
        )
        return await admin_change_password(update, context)
    
    elif action == "admin_about":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        await query.edit_message_text(
            "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...",
            reply_markup=None
        )
        return await admin_about(update, context)
    
    elif action == "admin_back":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
        await query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        await query.edit_message_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU

async def admin_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if update.message:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        broadcast_text = update.message.text
        approved_user_ids = get_approved_user_ids()
        
        success_count = 0
        error_count = 0
        
        progress_message = await update.message.reply_text(
            "üì® –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π...\n"
            "0% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (0/" + str(len(approved_user_ids)) + ")"
        )
        
        # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for i, user_id in enumerate(approved_user_ids):
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{broadcast_text}"
                )
                success_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                error_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞
            if (i + 1) % 5 == 0 or i == len(approved_user_ids) - 1:
                progress_percent = int((i + 1) / len(approved_user_ids) * 100)
                await progress_message.edit_text(
                    f"üì® –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...\n"
                    f"{progress_percent}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ({i+1}/{len(approved_user_ids)})"
                )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚úì –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
            f"üìù –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(approved_user_ids)}",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    elif update.callback_query:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        query = update.callback_query
        await query.answer()
        
        if query.data == "admin_back":
            await query.edit_message_text(
                "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                reply_markup=get_admin_keyboard()
            )
            return ADMIN_MENU
    
    return ADMIN_BROADCAST_MESSAGE

async def admin_user_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    
    if action == "admin_pending":
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        pending_users = get_pending_users()
        if pending_users:
            await query.edit_message_text(
                "‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
                reply_markup=get_pending_keyboard(pending_users)
            )
        else:
            await query.edit_message_text(
                "‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                reply_markup=get_user_management_keyboard()
            )
        return ADMIN_USER_MANAGEMENT
    
    elif action == "admin_all_users":
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = get_all_users()
        await query.edit_message_text(
            "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
            reply_markup=get_user_list_keyboard(users)
        )
        return ADMIN_USER_MANAGEMENT
    
    elif action == "admin_back":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    elif action.startswith("page_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        parts = action.split("_")
        page = int(parts[1])
        back_command = parts[2]
        
        if back_command == "admin_pending":
            pending_users = get_pending_users()
            await query.edit_message_text(
                "‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
                reply_markup=get_pending_keyboard(pending_users, page)
            )
        else:  # admin_all_users
            users = get_all_users()
            await query.edit_message_text(
                "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
                reply_markup=get_user_list_keyboard(users, page)
            )
        return ADMIN_USER_MANAGEMENT
    
    elif action.startswith("user_"):
        # –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        user_id = int(action.split("_")[1])
        user_data = get_user(user_id)
        
        if not user_data:
            await query.edit_message_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_user_management_keyboard()
            )
            return ADMIN_USER_MANAGEMENT
        
        is_admin = "‚úÖ" if user_data.get('is_admin') else "‚ùå"
        is_approved = "‚úÖ" if user_data.get('is_approved') else "‚ùå"
        username = user_data.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        
        user_info = (
            f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
            f"üÜî ID: {user_id}\n"
            f"üë§ –ò–º—è: @{username}\n"
            f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {is_admin}\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {is_approved}\n"
        )
        
        await query.edit_message_text(
            user_info,
            reply_markup=get_user_action_keyboard(user_id)
        )
        return ADMIN_USER_MANAGEMENT
    
    elif action.startswith("approve_") or action.startswith("reject_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_approve = action.startswith("approve_")
        user_id = int(action.split("_")[1])
        
        if is_approve:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∏ –æ–¥–æ–±—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                password = ''.join([str(hash(datetime.now()))[i:i+2] for i in range(0, 8, 2)])
                password_hash = hash_password(password)
                
                if approve_user(user_id, password_hash):
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
                    escaped_password = password.replace("_", "\\_").replace("*", "\\*").replace("[", "\\[").replace("]", "\\]").replace("(", "\\(").replace(")", "\\)").replace("~", "\\~").replace("`", "\\`").replace(">", "\\>").replace("#", "\\#").replace("+", "\\+").replace("-", "\\-").replace("=", "\\=").replace("|", "\\|").replace("{", "\\{").replace("}", "\\}").replace(".", "\\.").replace("!", "\\!")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_data = get_user(user_id)
                    lang_code = user_data['language_code'] if user_data and 'language_code' in user_data else 'tg'
                    
                    # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
                    approval_messages = {
                        'tg': f"‚úÖ –î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ “õ–∞–±—É–ª –∫–∞—Ä–¥–∞ —à—É–¥\\!\n\n–†–∞–º–∑–∏ —à—É–º–æ –±–∞—Ä–æ–∏ –≤–æ—Ä–∏–¥ —à—É–¥–∞–Ω: `{escaped_password}`\n\n–õ—É—Ç—Ñ–∞–Ω, –æ–Ω—Ä–æ –Ω–∏–≥–æ“≥ –¥–æ—Ä–µ–¥\\.",
                        'ru': f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞\\!\n\n–í–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞: `{escaped_password}`\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ\\.",
                        'uz': f"‚úÖ Arizangiz tasdiqlandi\\!\n\nKirish uchun parolingiz: `{escaped_password}`\n\nIltimos, uni saqlab qoling\\.",
                        'kk': f"‚úÖ ”®—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ –º–∞“õ“±–ª–¥–∞–Ω–¥—ã\\!\n\n–ö—ñ—Ä—É “Ø—à—ñ–Ω “õ“±–ø–∏—è —Å”©–∑—ñ“£—ñ–∑: `{escaped_password}`\n\n–û–Ω—ã —Å–∞“õ—Ç–∞–ø “õ–æ–π—ã“£—ã–∑\\.",
                        'en': f"‚úÖ Your request has been approved\\!\n\nYour password: `{escaped_password}`\n\nPlease save it\\."
                    }
                    
                    # –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
                    button_texts = {
                        'tg': "üöÄ –ë–∞ –±–æ—Ç –≤–æ—Ä–∏–¥ —à–∞–≤–µ–¥",
                        'ru': "üöÄ –í–æ–π—Ç–∏ –≤ –±–æ—Ç",
                        'uz': "üöÄ Botga kirish",
                        'kk': "üöÄ –ë–æ—Ç“õ–∞ –∫—ñ—Ä—É",
                        'en': "üöÄ Enter the bot"
                    }
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —è–∑—ã–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    message = approval_messages.get(lang_code, approval_messages['tg'])
                    button_text = button_texts.get(lang_code, button_texts['tg'])
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—Ö–æ–¥–∞
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton(button_text, callback_data="return_to_main")]
                    ])
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode='MarkdownV2',
                        reply_markup=keyboard
                    )
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    await query.edit_message_text(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –æ–¥–æ–±—Ä–µ–Ω. –ü–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                        reply_markup=get_user_management_keyboard()
                    )
                else:
                    await query.edit_message_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                        reply_markup=get_user_management_keyboard()
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                await query.edit_message_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}",
                    reply_markup=get_user_management_keyboard()
                )
        else:
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if delete_user(user_id):
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
                await query.edit_message_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω.",
                    reply_markup=get_user_management_keyboard()
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                    reply_markup=get_user_management_keyboard()
                )
        
        return ADMIN_USER_MANAGEMENT
    
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        await query.edit_message_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.",
            reply_markup=get_user_management_keyboard()
        )
        return ADMIN_USER_MANAGEMENT

async def register_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = update.effective_user
    user_id = user.id
    username = user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å
    user_data = get_user(user_id)
    
    if user_data and user_data.get('is_approved'):
        await update.message.reply_text(
            "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã."
        )
        return ConversationHandler.END
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if not user_data:
        add_user(user_id, username)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É
    PENDING_USERS[user_id] = {
        'user_id': user_id,
        'username': username,
        'timestamp': datetime.now()
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user(user_id)
    lang_code = user_data['language_code'] if user_data and 'language_code' in user_data else 'tg'
    
    # –°–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    request_messages = {
        'tg': "üìù –î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ –±–∞ –º–∞—ä–º—É—Ä —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥. "
              "–õ—É—Ç—Ñ–∞–Ω, —Ç–∞—Å–¥–∏“õ—Ä–æ –∏–Ω—Ç–∏–∑–æ—Ä —à–∞–≤–µ–¥. "
              "–í–∞“õ—Ç–µ –∫–∏ –¥–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ –±–∞—Ä—Ä–∞—Å”£ –º–µ—à–∞–≤–∞–¥, —à—É–º–æ –æ–≥–æ“≥–∏–Ω–æ–º–∞ –º–µ–≥–∏—Ä–µ–¥.",
        'ru': "üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. "
              "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.",
        'uz': "üìù Arizangiz administratorga yuborildi. "
              "Iltimos, tasdiqlashni kuting. "
              "Arizangiz ko'rib chiqilganda, sizga xabar beriladi.",
        'kk': "üìù –°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ ”ô–∫—ñ–º—à—ñ–≥–µ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ. "
              "–†–∞—Å—Ç–∞—É–¥—ã –∫“Ø—Ç—ñ“£—ñ–∑. "
              "”®—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ “õ–∞—Ä–∞–ª“ì–∞–Ω–¥–∞, —Å—ñ–∑–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ.",
        'en': "üìù Your request has been sent to the administrator. "
              "Please wait for confirmation. "
              "You will receive a notification when your request is reviewed."
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    support_messages = {
        'tg': "\n\nüìû –ê–≥–∞—Ä —Å–∞–≤–æ–ª –¥–æ—à—Ç–∞ –±–æ—à–µ–¥, –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –±–æ —Ö–∞–¥–∞–º–æ—Ç–∏ –¥–∞—Å—Ç–≥–∏—Ä”£ —Ç–∞–º–æ—Å –≥–∏—Ä–µ–¥: @tradeporu",
        'ru': "\n\nüìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @tradeporu",
        'uz': "\n\nüìû Savollaringiz bo'lsa, qo'llab-quvvatlash xizmatiga murojaat qilishingiz mumkin: @tradeporu",
        'kk': "\n\nüìû –°“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑ –±–æ–ª—Å–∞, “õ–æ–ª–¥–∞—É “õ—ã–∑–º–µ—Ç—ñ–Ω–µ —Ö–∞–±–∞—Ä–ª–∞—Å–∞ –∞–ª–∞—Å—ã–∑: @tradeporu",
        'en': "\n\nüìû If you have any questions, you can contact support: @tradeporu"
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
    message = request_messages.get(lang_code, request_messages['tg'])
    support_text = support_messages.get(lang_code, support_messages['tg'])
    message += support_text
    
    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    from create_welcome_image import create_welcome_image
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if create_welcome_image():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
            with open('welcome_image.png', 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=message
                )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await update.message.reply_text(message)
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    admin_chat_id = await get_admin_chat_id(context.bot)
    if admin_chat_id:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
            ]
        ]
        await context.bot.send_message(
            chat_id=admin_chat_id,
            text=f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                f"üÜî ID: {user_id}\n"
                f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,
        # —á—Ç–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        logger.warning(f"Admin chat not found. Registration request from user @{username} (ID: {user_id}) stored in pending list.")
    
    return ConversationHandler.END

def main():
    reconnect_delay = 5  # Start with 5 seconds delay
    max_reconnect_delay = 30  # Maximum delay between reconnection attempts
    max_consecutive_errors = 10
    error_count = 0
    last_error_time = None

    while True:  # Infinite loop for continuous operation
        try:
            # Start the keep-alive server
            keep_alive()
            logger.info("Starting bot...")

            application = Application.builder().token(BOT_TOKEN).build()

            # Add handlers
            application.add_handler(CommandHandler("start", start))
            application.add_handler(CommandHandler("download", download))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            application.add_handler(CommandHandler("register", register_command))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–∞–º–∏
            async def admin_currency_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏"""
                query = update.callback_query
                if query:
                    await query.answer()
                    action = query.data
                    
                    if action == "admin_back":
                        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
                        await query.edit_message_text(
                            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                            reply_markup=get_admin_keyboard()
                        )
                        return ADMIN_MENU
                    
                    elif action == "admin_add_currency":
                        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
                        await query.edit_message_text(
                            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã\n\n"
                            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                            "–ö–æ–¥ –ø–∞—Ä—ã|–°–∏–º–≤–æ–ª|–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n"
                            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                            "BTCUSD|BTC-USD|BTC/USD",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_currencies")
                            ]])
                        )
                        return ADMIN_CURRENCY_ADD
                    
                    elif action == "admin_refresh_currencies":
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –∏–∑ –±–∞–∑—ã
                        from models import import_default_currency_pairs
                        success = import_default_currency_pairs()
                        
                        if success:
                            await query.edit_message_text(
                                "‚úÖ –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_currencies")
                                ]])
                            )
                        else:
                            await query.edit_message_text(
                                "‚ÑπÔ∏è –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–ª–∏ –≤ –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ.",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_currencies")
                                ]])
                            )
                        return ADMIN_CURRENCY_MANAGEMENT
                    
                    elif action.startswith("currency_toggle_"):
                        # –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
                        pair_code = action.replace("currency_toggle_", "")
                        from models import update_currency_pair_status, get_all_currency_pairs
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—ã
                        pairs = get_all_currency_pairs()
                        current_pair = next((p for p in pairs if p['pair_code'] == pair_code), None)
                        
                        if current_pair:
                            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
                            new_status = not current_pair['is_active']
                            success = update_currency_pair_status(pair_code, new_status)
                            
                            if success:
                                status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
                                await query.edit_message_text(
                                    f"‚úÖ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ {current_pair['display_name']} —É—Å–ø–µ—à–Ω–æ {status_text}!",
                                    reply_markup=InlineKeyboardMarkup([[
                                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_currencies")
                                    ]])
                                )
                            else:
                                await query.edit_message_text(
                                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã.",
                                    reply_markup=InlineKeyboardMarkup([[
                                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_currencies")
                                    ]])
                                )
                        else:
                            await query.edit_message_text(
                                "‚ùå –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_currencies")
                                ]])
                            )
                        return ADMIN_CURRENCY_MANAGEMENT
                    
                    elif action == "admin_currencies":
                        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤–∞–ª—é—Ç
                        from models import get_all_currency_pairs
                        currency_pairs = get_all_currency_pairs()
                        
                        currency_list = "\n".join([
                            f"- {pair['display_name']} ({pair['pair_code']}): {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if pair['is_active'] else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}"
                            for pair in currency_pairs
                        ])
                        
                        if not currency_list:
                            currency_list = "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"
                        
                        currency_keyboard = [
                            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É", callback_data="admin_add_currency")],
                            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–∞—Ä—ã", callback_data="admin_refresh_currencies")],
                            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                        ]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
                        for pair in currency_pairs:
                            toggle_text = "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if pair['is_active'] else "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
                            currency_keyboard.insert(-1, [
                                InlineKeyboardButton(f"{pair['display_name']} - {toggle_text}", 
                                                    callback_data=f"currency_toggle_{pair['pair_code']}")
                            ])
                        
                        await query.edit_message_text(
                            f"üí± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏\n\n–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä:\n{currency_list}",
                            reply_markup=InlineKeyboardMarkup(currency_keyboard)
                        )
                        return ADMIN_CURRENCY_MANAGEMENT
                
                return ADMIN_CURRENCY_MANAGEMENT
            
            async def admin_add_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"""
                if update.callback_query:
                    query = update.callback_query
                    await query.answer()
                    
                    if query.data == "admin_currencies":
                        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤–∞–ª—é—Ç
                        return await admin_currency_management(update, context)
                    
                    return ADMIN_CURRENCY_ADD
                
                if update.message:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
                    text = update.message.text
                    parts = text.strip().split('|')
                    
                    if len(parts) != 3:
                        await update.message.reply_text(
                            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                            "–ö–æ–¥ –ø–∞—Ä—ã|–°–∏–º–≤–æ–ª|–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n"
                            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                            "BTCUSD|BTC-USD|BTC/USD",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_currencies")
                            ]])
                        )
                        return ADMIN_CURRENCY_ADD
                    
                    pair_code = parts[0].strip()
                    symbol = parts[1].strip()
                    display_name = parts[2].strip()
                    
                    from models import add_or_update_currency_pair
                    pair_id = add_or_update_currency_pair(pair_code, symbol, display_name)
                    
                    if pair_id:
                        # –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                        await update.message.reply_text(
                            f"‚úÖ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ {display_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –≤–∞–ª—é—Ç", callback_data="admin_currencies")
                            ]])
                        )
                    else:
                        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                        await update.message.reply_text(
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã.",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –≤–∞–ª—é—Ç", callback_data="admin_currencies")
                            ]])
                        )
                    
                    return ADMIN_CURRENCY_MANAGEMENT
                
                return ADMIN_CURRENCY_ADD
            
            async def admin_text_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞–º–∏ –±–æ—Ç–∞"""
                query = update.callback_query
                if query:
                    await query.answer()
                    action = query.data
                    
                    if action == "admin_back":
                        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
                        await query.edit_message_text(
                            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                            reply_markup=get_admin_keyboard()
                        )
                        return ADMIN_MENU
                    
                    elif action == "admin_add_text":
                        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                        await query.edit_message_text(
                            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\n\n"
                            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                            "–ö–ª—é—á|–Ø–∑—ã–∫|–¢–µ–∫—Å—Ç\n\n"
                            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                            "WELCOME|ru|–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_texts")
                            ]])
                        )
                        return ADMIN_TEXT_ADD
                    
                    elif action.startswith("admin_edit_text_"):
                        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                        key = action.replace("admin_edit_text_", "")
                        
                        from models import get_all_bot_messages
                        messages = get_all_bot_messages()
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É
                        key_messages = [msg for msg in messages if msg['message_key'] == key]
                        
                        message_text = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: {key}\n\n"
                        
                        for msg in key_messages:
                            lang_code = msg['language_code']
                            text = msg['message_text']
                            message_text += f"*{lang_code}*: {text[:50]}{'...' if len(text) > 50 else ''}\n\n"
                        
                        edit_keyboard = [
                            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", callback_data=f"admin_add_translation_{key}")],
                            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_texts")]
                        ]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
                        for msg in key_messages:
                            lang_code = msg['language_code']
                            edit_keyboard.insert(-1, [
                                InlineKeyboardButton(f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å {lang_code}", 
                                                    callback_data=f"admin_edit_translation_{key}_{lang_code}")
                            ])
                        
                        await query.edit_message_text(
                            message_text,
                            reply_markup=InlineKeyboardMarkup(edit_keyboard)
                        )
                        return ADMIN_TEXT_EDIT
                    
                    elif action == "admin_texts":
                        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ç–µ–∫—Å—Ç–æ–≤
                        from models import get_all_bot_messages
                        messages = get_all_bot_messages()
                        
                        texts_keyboard = [
                            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç", callback_data="admin_add_text")],
                            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                        ]
                        
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–∞–º
                        message_keys = {}
                        for msg in messages:
                            key = msg['message_key']
                            if key not in message_keys:
                                message_keys[key] = []
                            message_keys[key].append(msg)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                        for key in message_keys:
                            texts_keyboard.insert(-1, [InlineKeyboardButton(f"üìù {key}", callback_data=f"admin_edit_text_{key}")])
                        
                        if not message_keys:
                            message_summary = "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤"
                        else:
                            message_summary = "–¢–µ–∫—Å—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n" + "\n".join([
                                f"- {key} ({len(langs)} —è–∑—ã–∫–æ–≤)" 
                                for key, langs in message_keys.items()
                            ])
                        
                        await query.edit_message_text(
                            f"üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏ –±–æ—Ç–∞\n\n{message_summary}",
                            reply_markup=InlineKeyboardMarkup(texts_keyboard)
                        )
                        return ADMIN_TEXT_MANAGEMENT
                
                return ADMIN_TEXT_MANAGEMENT
            
            async def admin_text_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
                if update.callback_query:
                    query = update.callback_query
                    await query.answer()
                    
                    if query.data == "admin_texts":
                        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ç–µ–∫—Å—Ç–æ–≤
                        return await admin_text_management(update, context)
                    
                    return ADMIN_TEXT_ADD
                
                if update.message:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    text = update.message.text
                    parts = text.strip().split('|', 2)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ 3 —á–∞—Å—Ç–∏ (–∫–ª—é—á, —è–∑—ã–∫, —Ç–µ–∫—Å—Ç)
                    
                    if len(parts) != 3:
                        await update.message.reply_text(
                            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                            "–ö–ª—é—á|–Ø–∑—ã–∫|–¢–µ–∫—Å—Ç\n\n"
                            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                            "WELCOME|ru|–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_texts")
                            ]])
                        )
                        return ADMIN_TEXT_ADD
                    
                    key = parts[0].strip()
                    lang_code = parts[1].strip()
                    message_text = parts[2].strip()
                    
                    from models import update_bot_message
                    msg_id = update_bot_message(key, lang_code, message_text)
                    
                    if msg_id:
                        # –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                        await update.message.reply_text(
                            f"‚úÖ –¢–µ–∫—Å—Ç —Å –∫–ª—é—á–æ–º {key} –¥–ª—è —è–∑—ã–∫–∞ {lang_code} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Ç–µ–∫—Å—Ç–æ–≤", callback_data="admin_texts")
                            ]])
                        )
                    else:
                        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                        await update.message.reply_text(
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Ç–µ–∫—Å—Ç–æ–≤", callback_data="admin_texts")
                            ]])
                        )
                    
                    return ADMIN_TEXT_MANAGEMENT
                
                return ADMIN_TEXT_ADD
            
            async def admin_text_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤"""
                if update.callback_query:
                    query = update.callback_query
                    await query.answer()
                    action = query.data
                    
                    if action == "admin_texts":
                        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ç–µ–∫—Å—Ç–æ–≤
                        return await admin_text_management(update, context)
                    
                    elif action.startswith("admin_add_translation_"):
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
                        key = action.replace("admin_add_translation_", "")
                        
                        await query.edit_message_text(
                            f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∫–ª—é—á–∞: {key}\n\n"
                            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                            "–Ø–∑—ã–∫|–¢–µ–∫—Å—Ç\n\n"
                            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                            "en|Welcome to the bot!",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"admin_edit_text_{key}")
                            ]])
                        )
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        context.user_data['current_edit_key'] = key
                        return ADMIN_TEXT_ADD
                    
                    elif action.startswith("admin_edit_translation_"):
                        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                        parts = action.replace("admin_edit_translation_", "").split('_')
                        if len(parts) >= 2:
                            key = parts[0]
                            lang_code = parts[1]
                            
                            from models import get_bot_message
                            current_text = get_bot_message(key, lang_code)
                            
                            if current_text:
                                await query.edit_message_text(
                                    f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–ª—é—á–∞: {key}, —è–∑—ã–∫: {lang_code}\n\n"
                                    f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n{current_text}\n\n"
                                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
                                    reply_markup=InlineKeyboardMarkup([[
                                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"admin_edit_text_{key}")
                                    ]])
                                )
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                                context.user_data['current_edit_key'] = key
                                context.user_data['current_edit_lang'] = lang_code
                                return ADMIN_TEXT_EDIT
                            else:
                                await query.edit_message_text(
                                    "‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                    reply_markup=InlineKeyboardMarkup([[
                                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_texts")
                                    ]])
                                )
                                return ADMIN_TEXT_MANAGEMENT
                    
                    return ADMIN_TEXT_EDIT
                
                if update.message:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    text = update.message.text
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
                    if 'current_edit_key' in context.user_data and 'current_edit_lang' in context.user_data:
                        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                        key = context.user_data['current_edit_key']
                        lang_code = context.user_data['current_edit_lang']
                        
                        from models import update_bot_message
                        msg_id = update_bot_message(key, lang_code, text)
                        
                        if msg_id:
                            # –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
                            await update.message.reply_text(
                                f"‚úÖ –¢–µ–∫—Å—Ç —Å –∫–ª—é—á–æ–º {key} –¥–ª—è —è–∑—ã–∫–∞ {lang_code} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Ç–µ–∫—Å—Ç–æ–≤", callback_data="admin_texts")
                                ]])
                            )
                        else:
                            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                            await update.message.reply_text(
                                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Ç–µ–∫—Å—Ç–æ–≤", callback_data="admin_texts")
                                ]])
                            )
                        
                        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        if 'current_edit_key' in context.user_data:
                            del context.user_data['current_edit_key']
                        if 'current_edit_lang' in context.user_data:
                            del context.user_data['current_edit_lang']
                        
                        return ADMIN_TEXT_MANAGEMENT
                    
                    elif 'current_edit_key' in context.user_data:
                        # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                        key = context.user_data['current_edit_key']
                        parts = text.strip().split('|', 1)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ 2 —á–∞—Å—Ç–∏ (—è–∑—ã–∫, —Ç–µ–∫—Å—Ç)
                        
                        if len(parts) != 2:
                            await update.message.reply_text(
                                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                "–Ø–∑—ã–∫|–¢–µ–∫—Å—Ç\n\n"
                                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                                "en|Welcome to the bot!",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"admin_edit_text_{key}")
                                ]])
                            )
                            return ADMIN_TEXT_ADD
                        
                        lang_code = parts[0].strip()
                        message_text = parts[1].strip()
                        
                        from models import update_bot_message
                        msg_id = update_bot_message(key, lang_code, message_text)
                        
                        if msg_id:
                            # –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                            await update.message.reply_text(
                                f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–ª—é—á–∞ {key} –Ω–∞ —è–∑—ã–∫ {lang_code} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Ç–µ–∫—Å—Ç–æ–≤", callback_data="admin_texts")
                                ]])
                            )
                        else:
                            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                            await update.message.reply_text(
                                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞.",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Ç–µ–∫—Å—Ç–æ–≤", callback_data="admin_texts")
                                ]])
                            )
                        
                        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        if 'current_edit_key' in context.user_data:
                            del context.user_data['current_edit_key']
                        
                        return ADMIN_TEXT_MANAGEMENT
                
                return ADMIN_TEXT_EDIT
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –æ–ø—Ü–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            async def admin_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
                query = update.callback_query
                await query.answer()
                
                action = query.data
                
                if action == "admin_back":
                    await query.edit_message_text(
                        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        reply_markup=get_admin_keyboard()
                    )
                    return ADMIN_MENU
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
                settings_keyboard = [
                    [InlineKeyboardButton("‚è±Ô∏è –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_setting_update_freq")],
                    [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="admin_setting_notifications")],
                    [InlineKeyboardButton("üåê –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_setting_regional")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]
                
                await query.edit_message_text(
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
                    reply_markup=InlineKeyboardMarkup(settings_keyboard)
                )
                return ADMIN_SETTINGS
            
            async def admin_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
                query = update.callback_query
                await query.answer()
                
                action = query.data
                
                if action == "admin_back":
                    await query.edit_message_text(
                        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        reply_markup=get_admin_keyboard()
                    )
                    return ADMIN_MENU
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞)
                users = get_all_users()
                total_users = len(users)
                approved_users = sum(1 for user in users if user.get('is_approved'))
                
                # –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
                days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
                activity = [random.randint(5, 20) for _ in range(7)]
                
                activity_text = "üìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
                activity_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                activity_text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {approved_users}\n\n"
                
                activity_text += "üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:\n"
                for i, day in enumerate(days):
                    activity_text += f"{day}: {'‚ñÆ' * (activity[i] // 2)} ({activity[i]})\n"
                
                activity_keyboard = [
                    [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_activity_details")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]
                
                await query.edit_message_text(
                    activity_text,
                    reply_markup=InlineKeyboardMarkup(activity_keyboard)
                )
                return ADMIN_ACTIVITY
            
            async def admin_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
                query = update.callback_query
                await query.answer()
                
                if query.data == "admin_back":
                    await query.edit_message_text(
                        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        reply_markup=get_admin_keyboard()
                    )
                    return ADMIN_MENU
                
                about_text = (
                    "‚ÑπÔ∏è –û –±–æ—Ç–µ\n\n"
                    "‚ú® *Trade Analysis Bot* ‚ú®\n\n"
                    "–í–µ—Ä—Å–∏—è: 2.0.0\n"
                    "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω: Replit AI\n"
                    "–õ–∏—Ü–µ–Ω–∑–∏—è: Proprietary\n\n"
                    "üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n"
                    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ "
                    "—Å —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n\n"
                    "üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:\n"
                    "‚Ä¢ Python 3.11\n"
                    "‚Ä¢ Python-telegram-bot\n"
                    "‚Ä¢ PostgreSQL\n"
                    "‚Ä¢ YFinance API\n\n"
                    "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @tradeporu\n"
                )
                
                about_keyboard = [
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]
                
                await query.edit_message_text(
                    about_text,
                    reply_markup=InlineKeyboardMarkup(about_keyboard),
                    parse_mode='Markdown'
                )
                return ADMIN_ABOUT
            
            async def admin_change_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
                query = update.callback_query
                if query:
                    await query.answer()
                    
                    if query.data == "admin_back":
                        await query.edit_message_text(
                            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                            reply_markup=get_admin_keyboard()
                        )
                        return ADMIN_MENU
                    
                    # –ü–µ—Ä–≤—ã–π –∑–∞—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é
                    keyboard = [
                        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                    ]
                    
                    await query.edit_message_text(
                        "üîê –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                        "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    context.user_data['admin_changing_password'] = True
                    return ADMIN_CHANGE_PASSWORD
                
                elif update.message and context.user_data.get('admin_changing_password'):
                    new_password = update.message.text
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
                    if len(new_password) < 6:
                        await update.message.reply_text(
                            "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤!\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /admin –¥–ª—è –æ—Ç–º–µ–Ω—ã."
                        )
                        return ADMIN_CHANGE_PASSWORD
                    
                    # –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ config
                    new_password_hash = hash_password(new_password)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
                    global ADMIN_PASSWORD_HASH
                    ADMIN_PASSWORD_HASH = new_password_hash
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è
                    await update.message.reply_text(
                        "‚úÖ –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!",
                        reply_markup=get_admin_keyboard()
                    )
                    
                    # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    if 'admin_changing_password' in context.user_data:
                        del context.user_data['admin_changing_password']
                    
                    return ADMIN_MENU
                
                return ADMIN_MENU
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            admin_conv_handler = ConversationHandler(
                entry_points=[CommandHandler("admin", admin_command)],
                states={
                    ADMIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_check_password)],
                    ADMIN_MENU: [CallbackQueryHandler(admin_menu_handler)],
                    ADMIN_USER_MANAGEMENT: [CallbackQueryHandler(admin_user_management)],
                    ADMIN_BROADCAST_MESSAGE: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast_message),
                        CallbackQueryHandler(admin_broadcast_message)
                    ],
                    ADMIN_CURRENCY_MANAGEMENT: [CallbackQueryHandler(admin_currency_management)],
                    ADMIN_CURRENCY_ADD: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_add_currency),
                        CallbackQueryHandler(admin_add_currency)
                    ],
                    ADMIN_CURRENCY_EDIT: [CallbackQueryHandler(admin_currency_management)],
                    ADMIN_TEXT_MANAGEMENT: [CallbackQueryHandler(admin_text_management)],
                    ADMIN_TEXT_ADD: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_text_add),
                        CallbackQueryHandler(admin_text_add)
                    ],
                    ADMIN_TEXT_EDIT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_text_edit),
                        CallbackQueryHandler(admin_text_edit)
                    ],
                    ADMIN_SETTINGS: [CallbackQueryHandler(admin_settings)],
                    ADMIN_CHANGE_PASSWORD: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_change_password),
                        CallbackQueryHandler(admin_change_password)
                    ],
                    ADMIN_ACTIVITY: [CallbackQueryHandler(admin_activity)],
                    ADMIN_ABOUT: [CallbackQueryHandler(admin_about)],
                },
                fallbacks=[CommandHandler("start", start)]
            )
            application.add_handler(admin_conv_handler)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            application.add_handler(CallbackQueryHandler(handle_admin_action, pattern=r"^(approve|reject)_\d+$"))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            application.add_handler(CallbackQueryHandler(button_click))

            # Set up error handlers
            application.add_error_handler(error_handler)

            # Reset error count on successful startup
            error_count = 0
            last_error_time = None

            # Run the bot with enhanced polling settings
            logger.info("Bot is running...")
            application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
        except Exception as e:
            current_time = datetime.now()

            # Reset error count if last error was more than 1 hour ago
            if last_error_time and (current_time - last_error_time).seconds > 3600:
                error_count = 0

            error_count += 1
            last_error_time = current_time

            logger.error(f"Bot crashed with error: {str(e)}")
            logger.info(f"Attempting to restart in {reconnect_delay} seconds...")

            if error_count >= max_consecutive_errors:
                logger.critical("Too many consecutive errors. Forcing system restart...")
                try:
                    # Additional cleanup before restart
                    if 'application' in locals():
                        try:
                            application.stop()
                        except:
                            pass
                    os.execv(sys.executable, ['python'] + sys.argv)
                except Exception as restart_error:
                    logger.error(f"Failed to restart: {restart_error}")
                continue

            # Implement exponential backoff for reconnection attempts
            time.sleep(reconnect_delay)
            reconnect_delay = min(reconnect_delay * 2, max_reconnect_delay)

            # Log detailed error information
            logger.error("Detailed error information:", exc_info=True)
            continue
        finally:
            # Reset reconnect delay on successful connection
            reconnect_delay = 5

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle errors in the telegram bot."""
    logger.error(f"Exception while handling an update: {context.error}")
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –•–∞—Ç–æ–≥”£ —Ä—É—Ö –¥–æ–¥. –õ—É—Ç—Ñ–∞–Ω, –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥."
            )
    except Exception as e:
        logger.error(f"Error in error handler: {str(e)}")

if __name__ == '__main__':
    main()